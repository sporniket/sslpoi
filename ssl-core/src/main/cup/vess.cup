// CUP specification for VErbose SpornyScript (vess)
// [FIXME] for now use a sample spec to get the build up and running.
// CUP specification for a simple expression evaluator (w/ actions)

import java_cup.runtime.*;
import com.sporniket.scripting.ssl.core.*;
import com.sporniket.scripting.ssl.mass.*;

/* Terminals (tokens returned by the scanner). */
terminal AS;
terminal CALL;
terminal COMMA;
terminal DEFINE;
terminal ELSE;
terminal FROM;
terminal IDENTIFIER;
terminal IF;
terminal IS;
terminal LIKE;
terminal NEW;
terminal PACKAGEPREFIX;
terminal USING;

/* Non-terminals */
non terminal expr_access_stack;
non terminal expr_classname;
non terminal expr_from;
non terminal expr_logic;
non terminal expr_methodname;
non terminal expr_value;
non terminal part_if_alternatives;
non terminal part_using__list;
non terminal part_using__single;
non terminal statm__list;
non terminal statm__single;
non terminal statm_call;
non terminal statm_define;
non terminal statm_if;

/* Precedences */
//precedence left PLUS, MINUS;
//precedence left TIMES, DIVIDE, MOD;
//precedence left UMINUS;

//======== GRAMMAR ========
//==== Statements break down ====
statm__list 
	::= 
		statm__single:statm statm__list:other 
		{: 
			((VessNode) statm).setNext((VessNode) other) ; RESULT = statm ; 
		:} 
	|
		statm__single:statm 
		{: 
			RESULT = statm ; 
		:}
	;

statm__single
	::=
		statm_call:statm 
		{: 
			RESULT = statm ; 
		:}
	|
		statm_define:statm 
		{: 
			RESULT = statm ; 
		:}
	|
		statm_if:statm 
		{: 
			RESULT = statm ; 
		:}
	;

//==== Statement types ====
statm_call
	::=
		CALL expr_methodname:meth USING part_using__list:using
		{:
			RESULT = new VessNodeCall().withCall((VessNodeAccessor)meth).withMapping((VessNodeArgumentMapping) using) ;
		:}
	|
		CALL expr_methodname:meth
		{:
			RESULT = new VessNodeCall().withCall((VessNodeAccessor)meth) ;
		:}
	;

statm_define 
	::= 
		DEFINE IDENTIFIER:id AS NEW expr_classname:cls 
		{: 
			RESULT = new VessNodeDefineAs((String)id, InitialisationMode.NEW, (String)cls) ; 
		:}
	;

statm_if
	::=
		IF expr_logic:logic statm_list:list ENDIF
		{:
		:}
	|
		IF expr_logic:logic statm_list:list part_if_alternatives:alternatives
		{:
		:}
	;

//== Statement parts ==
part_if_alternatives
	::=
		ELSE statm_if:alternative
		{:
			RESULT = alternative ;
		:}
	|
		ELSE statm:list ENDIF
		{:
		:}
	;
part_using__list
	::=
		part_using__single:single COMMA part_using__list:list
		{:
			RESULT = ((VessNode)single).withLastNode((VessNode)list);
		:}
	|
		part_using__single:single
		{:
			RESULT = single ;
		:}
	;

part_using__single
	::=
		expr_value:val AS IDENTIFIER:id
		{:
			RESULT = new VessNodeArgumentMapping().withName((String)id).withValue((VessNode)val);
		:}
	;

//==== Expressions ====
expr_classname 
	::= 
		PACKAGEPREFIX:pack IDENTIFIER:cls 
		{: 
			RESULT = ((String)pack)+((String)cls) ; 
		:}
	|
		IDENTIFIER:cls 
		{: 
			RESULT = cls ; 
		:} 
	;

expr_from
	::=
		FROM IDENTIFIER:id expr_from:from 
		{: 
			VessNodeAccessor _node = new VessNodeAccessor().withValue((String)id);
			RESULT = ((VessNode)from).withLastNode(_node);
		:}
	|
		FROM IDENTIFIER:id 
		{:
			RESULT = new VessNodeAccessor().withValue((String)id);
		:}
	;
	
expr_access_stack
	::=
		IDENTIFIER:id expr_from:from 
		{: 
			VessNodeAccessor _node = new VessNodeAccessor().withValue((String)id);
			RESULT = ((VessNode)from).withLastNode(_node);
		:}
	|
		IDENTIFIER:id
		{: 
			RESULT = new VessNodeAccessor().withValue((String)id);
		:}
	;
	
expr_logic
	::=
		expr_value:value IS expr_value:expected
		{:
		:}
	|
		expr_value:value IS LIKE expr_value:expected
		{:
		:}
	;

expr_methodname
	::=
		expr_access_stack:stack
		{:
			RESULT = stack ;
		:}
	;
		
	
expr_value
	::=
		expr_access_stack:stack
		{:
			RESULT = stack ;
		:}
	;
